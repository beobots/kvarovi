use anyhow::{Ok, Result};
use csv::{Reader, StringRecord};
use serde::Deserialize;
use std::fs::{File};
use std::io::Write;
use std::path::Path;

#[derive(Debug, Deserialize, Clone)]
struct Record {
    street_name: String,
    old_street_name: Option<String>,
    municipality: String,
    settlement: String,
    settlement_part: String,
    si_list: Option<String>,
}

struct Records(Vec<Record>);

impl std::fmt::Display for Record {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}, {}, {}, {}, {}, {}",
            self.street_name,
            self.old_street_name.as_ref().unwrap_or(&String::from("")),
            self.municipality,
            self.settlement,
            self.settlement_part,
            self.si_list.as_ref().unwrap_or(&String::from(""))
        )
    }
}

impl std::fmt::Display for Records {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        for record in &self.0 {
            write!(f, "{}\n", record)?;
        }
        std::result::Result::Ok(())
    }
}

impl From<Vec<Record>> for Records {
    fn from(records: Vec<Record>) -> Self {
        Records(records)
    }
}

fn write_warning(file: &mut File) -> Result<()> {
    writeln!(
        file,
        "// This file is generated by build.rs. Do not edit it manually!\n"
    )?;

    Ok(())
}

fn write_imports(file: &mut File) -> Result<()> {
    writeln!(file, "use crate::Street;")?;
    writeln!(file, "\n")?;

    Ok(())
}

fn write_street_type(file: &mut File) -> Result<()> {
    writeln!(file, "#[derive(Debug, Clone)]")?;
    writeln!(file, "pub struct Street {{")?;
    writeln!(file, "    pub street_name: String,")?;
    writeln!(file, "    pub old_street_name: Option<String>,")?;
    writeln!(file, "    pub municipality: String,")?;
    writeln!(file, "    pub settlement: String,")?;
    writeln!(file, "    pub settlement_part: String,")?;
    writeln!(file, "    pub si_list: Option<String>,")?;
    writeln!(file, "}}\n")?;

    Ok(())
}

fn write_street_vector(file: &mut File, v: &Vec<Record>) -> Result<()> {
    writeln!(file, "pub fn get_streets_list() -> Vec<Street> {{")?;
    writeln!(file, "    let streets: [Street; {}] = [", v.len())?;
    for record in v {
        writeln!(file, "        Street {{")?;
        writeln!(
            file,
            "            street_name: String::from(\"{}\"),",
            record.street_name
        )?;
        writeln!(
            file,
            "            old_street_name: Some(String::from(\"{}\")),",
            record.old_street_name.as_ref().unwrap_or(&String::from(""))
        )?;
        writeln!(
            file,
            "            municipality: String::from(\"{}\"),",
            record.municipality
        )?;
        writeln!(
            file,
            "            settlement: String::from(\"{}\"),",
            record.settlement
        )?;
        writeln!(
            file,
            "            settlement_part: String::from(\"{}\"),",
            record.settlement_part
        )?;
        writeln!(
            file,
            "            si_list: Some(String::from(\"{}\")),",
            record.si_list.as_ref().unwrap_or(&String::from(""))
        )?;
        writeln!(file, "        }},")?;
    }
    writeln!(file, "    ];\n")?;
    writeln!(file, "    streets.to_vec()")?;
    writeln!(file, "}}\n")?;

    Ok(())
}

fn main() -> Result<()> {
    println!("cargo:rerun-if-changed=beograd_streets.csv");

    let mut rdr = Reader::from_path("beograd_streets.csv").expect("csv file not found");

    rdr.set_headers(StringRecord::from(vec![
        "street_name",
        "old_street_name",
        "municipality",
        "settlement",
        "settlement_part",
        "si_list",
    ]));

    let result = rdr
        .deserialize()
        .map(|record| {
            let record: Record = record?;
            Ok(record)
        })
        .filter_map(|r| r.ok())
        .collect::<Vec<Record>>();

    let dest_path = Path::new("./src").join("streets.rs");
    let mut file = File::create(dest_path)?;

    write_warning(&mut file)?;
    write_imports(&mut file)?;
    // write_street_type(&mut file)?;
    write_street_vector(&mut file, &result[0..10].to_vec())?;

    Ok(())
}
